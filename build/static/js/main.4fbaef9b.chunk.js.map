{"version":3,"sources":["WordLine/index.tsx","services/wordService.ts","data/words.ts","Main/index.tsx","utils/arraysReallyEqual.ts","Victory/index.tsx","Defeat/index.tsx","Options/index.tsx","Nope/index.tsx","App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["WordLine","word","successfulLetters","className","split","map","letter","includes","v4","WordService","maxWordLength","this","filteredWords","filter","length","toLowerCase","randomIndex","Math","floor","random","Main","setWord","totalGuesses","useState","isError","setIsError","setLetter","setSuccessfulLetters","failedLetters","setFailedLetters","history","useHistory","useEffect","getWord","checkGameStatus","a","process","wordService","setNewWord","_word","undefined","verifyLetter","match","alert","arr","b","wordUniqueLetters","Set","push","Array","from","isArray","every","val","onClick","htmlFor","id","type","size","minLength","maxLength","onChange","e","target","value","onKeyDown","key","handleKeydown","sort","_letter","to","Victory","Defeat","setTimeout","Options","setTotalGuesses","setMaxWordLength","restoreDefaults","sessionStorage","setItem","toString","Nope","location","useLocation","pathname","App","getStoredTotalGuesses","res","getItem","parseInt","getStoredMaxWordLength","path","window","reload","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fbaef9b.chunk.js","sourcesContent":["import React from 'react';\nimport { v4 } from 'uuid';\nimport './index.css';\n\ninterface Props {\n  word: string;\n  successfulLetters: string[];\n}\n\nconst WordLine = ({ word, successfulLetters }: Props) => {\n  return (\n    <div className=\"word-line\">\n      {word.split('').map((letter) => {\n        if (successfulLetters.includes(letter)) {\n          return (\n            <div className=\"word-line-letter\" key={v4()}>\n              {letter}\n            </div>\n          );\n        } else {\n          return <div key={v4()}>__</div>;\n        }\n      })}\n    </div>\n  );\n};\n\nexport default WordLine;\n","import { words } from '../data/words';\n\nexport class WordService {\n  word: string;\n\n  constructor(public maxWordLength = 6) {\n    this.word = '';\n  }\n\n  setNewWord(): void {\n    const filteredWords = words\n      .split(',')\n      .filter((word) => word.length <= this.maxWordLength)\n      .map((word) => word.toLowerCase());\n\n    const randomIndex = Math.floor(\n      Math.random() * (filteredWords.length - 0 + 1) + 0,\n    );\n    this.word = filteredWords[randomIndex];\n  }\n}\n","export const words =\n  'ADORABLE,POUND,FLASH,REFUGEE,CARAVAN,BLEND,GRIN,SPHERE,CREEPY,JIGSAW,JERK,FREAKISH,DOSAGE,EMBRACE,ENTITY,INTERNAL,SECTOR,BACTERIA,AMPUTATION,LAST,REVOLT,COSMIC,BITTER,LADYBUG,EASTERN,CHAIR,ABSTRACTLY,HAPPINESS,BILLION,CLOTH,HOMEMADE,EROTICA,DROPPINGS,RIB,ESSENTIAL,GORGEOUS,GUSHING,NAKED,FLAT,BATTERY,QUANTUM,COASTAL,AUCTION,SOUTHERN,NUDE,ACTOR,FARM,PIN,NUCLEAR,NOBLE,COLLAR,WEB,AMBIGUOUS,BECAME,TEARGAS,SPIRIT,SLAP,DIRECTION,GRIZZLY,PLANTATION,PERVERTED,DISMEMBERMENT,ACCESSORIES,WORLD,CHECKPOINT,EFFECTIVE,COUNTRY,EXTORTION,ARSONIST,DRIFTING,APPARENTLY,WEARABLE,BASE,BEGIN,ONE,PERVERTED,DEXTERITY,ANNUAL,AFTERWARDS,INTRUDER,DISTORTION,COSMICALLY,ABSURD,FOREIGN,CONFLICT,PARALLEL,EAR,GENUINE,FIENDISH,PERFUME,SAND,GLASS,EXCESSIVE,HOLD,INVENTION,ABNORMAL,HEROIC,CARDINAL,FLAMMABLE,SPIDER,FRAUD,CARRION,ANALYST,ACOUSTIC,CHRONOLOGICAL,ACCURACY,PASSENGER,CYNICAL,PROPER,FUEL,ALTERNATE,DOOMSDAY,FLUTTER,AQUARIUM,SERIES,BREATHLESS,WHALES,GOBBLING,EXCLUSIVE,PLAY,ENRAGE,FINALE,ALLIED,SLAP,STALLION,DETACHABLE,BELOW,NORM,CONTINENTAL,DONUT,RESEARCH,DOCTOR,DAUGHTER,PUZZLE,ZOO,GAMBLE,COAT,HOMETOWN,FASHION,MASSACRE,CRICKET,ALARM,DESTRUCTION,DOOMSDAY,CHURCH,BITTER,FINCH,HOBBY,ANXIETY,FRISKY,BARN,AMBIENT,CENTRAL,PUZZLE,GRADE,HECTIC,FERMENT,AGONIZING,ANNUAL,CRAFTY,CARVER,COMPLETE,EVERLASTING,ROTTEN,HAWK,HELMET,DECONTAMINATION,NECROTIC,GALLOPING,THINK,MORTAL,CONDO,COMPANY,EDGE,FROGS,HALF,KEY,MASSIVE,BLOCK,BLOODSUCKER,LOLLIPOP,FLORAL,SAVAGE,SLAVE,FICTIONAL,PROTECT,APE,CONDITION,LEFT,SMART,BITTERSWEET,HITCHHIKER,BASTION,ELEPHANTS,GIANT,DISGUSTING,WARP,FREQUENCY,APPETITE,LOLLIPOP,DRUG,BRUTAL,DIABOLIC,EXCHANGE,DIFFERENT,AEROBATIC,SMART,HAMSTER,ABDUCTED,UNIT,WIFE,SWEET,BLEMISH,EARTHMEN,CODE,BLOODTHIRSTY,ASTOUNDING,BLEEDER,SAINT,ABANDONED,FULLY,GREEDY,LIME,APPALLING,FAT,KANGAROO,EAT,BADLANDS,HEAVYWEIGHT,AFTERWARDS,CARROT,DADDY,SHOCK,GOLD,MACHINE,CANNON,APRICOT,ANTICLIMACTIC,PROBE,GANG,PROTEST,BURIAL,FACADE,FRINGE,AMPUTATION,APPEAL,SERIES,UGLY,HOLLOWNESS,CLUB,GLIMMER,HORIZONTAL,PITCH,EVIL,FINAL,POISONOUS,BARBARIAN,PAPER,LUCKY,LADYBUG,DAMN,CYANIDE,HUSTLE,PROGRAM,BIRTHPLACE,BELLYBUTTON,EMPOWERMENT,ARCHITECT,APPETITE,EASIER,DELICATESSEN,AMERICANA,SKYLINE,GLAND,PLANET,FALLS,PERIODIC,FAITHLESS,CONVERTIBLE,CARESS,BOARDER,DRUNK,FORGIVEN,CARBON,WILD,DEBAUCHERY,DART,CEREMONY,FAITH,KING,SWOLLEN,HIDEOUS,CARNAL,CADAVER,RERUN,PIPES,DESTINY,GOODBYE,AMPLITUDE,BANK';\n","import React, { useEffect, useState, Dispatch, SetStateAction } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { v4 } from 'uuid';\nimport WordLine from '../WordLine';\nimport { arraysSameValues } from '../utils/arraysReallyEqual';\nimport './index.css';\nimport { WordService } from '../services/wordService';\n\ninterface Props {\n  word: string;\n  setWord: Dispatch<SetStateAction<string>>;\n  totalGuesses: number;\n  maxWordLength: number;\n}\n\nconst Main = ({ word, setWord, totalGuesses, maxWordLength }: Props) => {\n  const [isError, setIsError] = useState(false);\n  const [letter, setLetter] = useState('');\n  const [successfulLetters, setSuccessfulLetters] = useState<string[]>([]);\n  const [failedLetters, setFailedLetters] = useState<string[]>([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    getWord();\n    return () => {\n      setFailedLetters([]);\n      setSuccessfulLetters([]);\n    };\n  }, []);\n\n  useEffect(() => {\n    checkGameStatus();\n  });\n\n  const getWord = async (): Promise<string | undefined> => {\n    setIsError(false);\n    const isDebugMode = process.env.REACT_APP_MODE === 'debug';\n    if (isDebugMode) {\n      // enter in a test word to debug\n      const word = prompt('Enter in a test word.');\n      if (word && typeof word === 'string' && word.length > 1) {\n        setWord(word.toLowerCase());\n        setFailedLetters([]);\n        setSuccessfulLetters([]);\n      } else {\n        alert(\n          'Error: you must enter in a valid word consisting of at least two letters. Please reload the page and try again.',\n        );\n      }\n    } else {\n      // a random word is generated for the user.\n      try {\n        const wordService = new WordService(maxWordLength);\n        wordService.setNewWord();\n        const _word = wordService.word;\n        setWord(_word.toLowerCase());\n        setFailedLetters([]);\n        setSuccessfulLetters([]);\n      } catch (error) {\n        setIsError(true);\n        return undefined;\n      }\n    }\n  };\n\n  const verifyLetter = (): void => {\n    if (!letter || !letter.match(/[a-zA-Z]/)) {\n      alert('Error: you must enter a letter.');\n      setLetter('');\n      return;\n    }\n    if (word.includes(letter)) {\n      setSuccessfulLetters((arr) => [...arr, letter.toLowerCase()]);\n    } else if (failedLetters.includes(letter)) {\n      alert('Oops! You have already guessed this letter. Please try again.');\n      setLetter('');\n    } else setFailedLetters((arr) => [...arr, letter.toLowerCase()]);\n    setLetter('');\n  };\n\n  const checkGameStatus = (): void => {\n    const wordUniqueLetters = new Set([...word.split('')]);\n    if (failedLetters.length >= totalGuesses) {\n      history.push('defeat');\n    } else if (\n      successfulLetters.length > 0 &&\n      arraysSameValues(successfulLetters, Array.from(wordUniqueLetters))\n    ) {\n      history.push('/victory');\n    }\n  };\n\n  const handleKeydown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') verifyLetter();\n  };\n\n  if (isError) {\n    return (\n      <div className=\"main\">\n        <h2 className=\"error\">\n          Something went wrong fetching your word! Please try again later.\n        </h2>\n        <button\n          className=\"utility-button\"\n          onClick={() => {\n            history.push('/');\n          }}\n        >\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"main\">\n      <WordLine word={word} successfulLetters={successfulLetters} />\n      <div className=\"main-container\">\n        <div className=\"main-top-items-container dark\">\n          <h2 className=\"main-total-guesses\">\n            You have {totalGuesses - failedLetters.length} guesses left.\n          </h2>\n          <div className=\"main-inputs-container\">\n            <label\n              htmlFor=\"letterInput\"\n              className=\"main-inputs-container-label main-central-part-label\"\n            >\n              Enter a letter:\n            </label>\n            <input\n              id=\"letterInput\"\n              type=\"text\"\n              className=\"main-inputs-container-input-field\"\n              size={1}\n              minLength={1}\n              maxLength={1}\n              onChange={(e) => setLetter(e.target.value.toLowerCase())}\n              onKeyDown={(e) => handleKeydown(e)}\n              value={letter}\n            />\n            <button\n              onClick={verifyLetter}\n              className=\"main-inputs-container-verify-button utility-button\"\n            >\n              Verify Letter\n            </button>\n          </div>\n          <div className=\"main-failed-letters-container\">\n            <p className=\"main-central-part-label main-failed-letters-label\">\n              Failed Letters:\n            </p>\n            {failedLetters.length ? (\n              <div className=\"main-failed-letters-list\">\n                {failedLetters.sort().map((_letter) => (\n                  <div key={v4()} className=\"main-failed-letter\">\n                    {_letter}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p>None yet! Let&apos;s go for the win!</p>\n            )}\n          </div>\n        </div>\n        <div className=\"main-bottom-items-container light\">\n          <button\n            onClick={getWord}\n            className=\"main-new-word-button utility-button\"\n          >\n            New Word\n          </button>\n          <Link className=\"main-options-link\" to=\"/options\">\n            Options\n          </Link>\n          <p className=\"main-reset-warning\">\n            (Going here will reset the word and your guesses.)\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","// modified from https://masteringjs.io/tutorials/fundamentals/compare-arrays\n\nexport const arraysSameValues = (a: string[], b: string[]): boolean =>\n  Array.isArray(a) &&\n  Array.isArray(b) &&\n  a.length === b.length &&\n  a.every((val: string) => b.includes(val));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './index.css';\n\nconst Victory = () => {\n  return (\n    <div className=\"victory dark\">\n      <h2 className=\"victory-heading\">You Win!</h2>\n      <p className=\"victory-play-again-message\">Play again!</p>\n      <Link className=\"victory-back-home-link\" to=\"/\">\n        New Game\n      </Link>\n    </div>\n  );\n};\n\nexport default Victory;\n","import React, { useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport './index.css';\n\ninterface Props {\n  word: string;\n}\n\nconst Defeat = ({ word }: Props) => {\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!word) {\n      setTimeout(() => {\n        history.push('/');\n      }, 3000);\n    }\n  }, []);\n\n  return (\n    <div className=\"defeat dark\">\n      <h2 className=\"defeat-heading\">\n        {word ? 'You Lose!' : 'No word! Redirecting back home.'}\n      </h2>\n      {word && (\n        <p className=\"defeat-word-display\">\n          The word was: <em>{word}</em>.\n        </p>\n      )}\n      <Link to=\"/\">{word ? 'New Game' : 'Back Home'}</Link>\n    </div>\n  );\n};\n\nexport default Defeat;\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Link } from 'react-router-dom';\nimport './index.css';\n\ninterface Props {\n  totalGuesses: number;\n  setTotalGuesses: Dispatch<SetStateAction<number>>;\n  maxWordLength: number;\n  setMaxWordLength: Dispatch<SetStateAction<number>>;\n  restoreDefaults: () => void;\n}\n\nconst Options = ({\n  totalGuesses,\n  setTotalGuesses,\n  maxWordLength,\n  setMaxWordLength,\n  restoreDefaults,\n}: Props) => {\n  const _setMaxWordLength = (val: number): void => {\n    sessionStorage.setItem('hangman-max-word-length', val.toString());\n    setMaxWordLength(val);\n  };\n\n  const _setTotalGuesses = (val: number): void => {\n    sessionStorage.setItem('hangman-total-guesses', val.toString());\n    setTotalGuesses(val);\n  };\n\n  return (\n    <div className=\"options dark\">\n      <h2 className=\"options-heading\">Set Options</h2>\n      <div className=\"options-total-guesses-container\">\n        <label htmlFor=\"totalGuesses\" className=\"options-total-guesses-label\">\n          Total Guesses\n        </label>\n        <select\n          id=\"totalGuesses\"\n          value={totalGuesses}\n          onChange={(e) => _setTotalGuesses(+e.target.value)}\n        >\n          <option>1</option>\n          <option>2</option>\n          <option>3</option>\n          <option>4</option>\n          <option>5</option>\n          <option>6</option>\n          <option>7</option>\n          <option>8</option>\n        </select>\n      </div>\n      <div className=\"options-max-word-length-container\">\n        <label\n          htmlFor=\"maxWordLength\"\n          className=\"options-max-word-length-label\"\n        >\n          Max Word Length:\n        </label>\n        <select\n          id=\"maxWordLength\"\n          value={maxWordLength}\n          onChange={(e) => _setMaxWordLength(+e.target.value)}\n        >\n          <option>3</option>\n          <option>4</option>\n          <option>5</option>\n          <option>6</option>\n          <option>7</option>\n          <option>8</option>\n        </select>\n      </div>\n      <button className=\"utility-button\" onClick={restoreDefaults}>\n        Restore Defaults\n      </button>\n      <Link className=\"options-back-home-link\" to=\"/\">\n        Back to Game\n      </Link>\n    </div>\n  );\n};\n\nexport default Options;\n","import React from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport './index.css';\n\nconst Nope = () => {\n  const location = useLocation();\n\n  return (\n    <div className=\"nope dark\">\n      <h2 className=\"nope-heading\">Page Not Found!</h2>\n      <p>\n        Oops! We could not find the page at <code>{location.pathname}</code>.\n        Please try again.\n      </p>\n      <Link className=\"nope-back-home-link\" to=\"/\">\n        Back to Game\n      </Link>\n    </div>\n  );\n};\n\nexport default Nope;\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Main from '../Main';\nimport Victory from '../Victory';\nimport Defeat from '../Defeat';\nimport Options from '../Options';\nimport Nope from '../Nope';\nimport './index.css';\n\nfunction App() {\n  const [word, setWord] = useState('');\n  const [maxWordLength, setMaxWordLength] = useState(6);\n  const [totalGuesses, setTotalGuesses] = useState(6);\n\n  const getStoredTotalGuesses = (): number | undefined => {\n    const res = sessionStorage.getItem('hangman-total-guesses');\n    if (res) return parseInt(res);\n    return undefined;\n  };\n\n  const getStoredMaxWordLength = (): number | undefined => {\n    const res = sessionStorage.getItem('hangman-max-word-length');\n    if (res) return parseInt(res);\n    return undefined;\n  };\n\n  const restoreDefaults = (): void => {\n    sessionStorage.setItem('hangman-max-word-length', '6');\n    setMaxWordLength(6);\n\n    sessionStorage.setItem('hangman-total-guesses', '6');\n    setTotalGuesses(6);\n\n    window.location.reload();\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Hangman!</h1>\n        </header>\n        <div className=\"core-component\">\n          <Switch>\n            <Route path=\"/victory\">\n              <Victory />\n            </Route>\n            <Route path=\"/defeat\">\n              <Defeat word={word} />\n            </Route>\n            <Route path=\"/options\">\n              <Options\n                totalGuesses={getStoredTotalGuesses() || totalGuesses}\n                setTotalGuesses={setTotalGuesses}\n                maxWordLength={getStoredMaxWordLength() || maxWordLength}\n                setMaxWordLength={setMaxWordLength}\n                restoreDefaults={restoreDefaults}\n              />\n            </Route>\n            <Route exact path=\"/\">\n              <Main\n                word={word}\n                setWord={setWord}\n                totalGuesses={getStoredTotalGuesses() || totalGuesses}\n                maxWordLength={getStoredMaxWordLength() || maxWordLength}\n              />\n            </Route>\n            <Route path=\"*\">\n              <Nope />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}